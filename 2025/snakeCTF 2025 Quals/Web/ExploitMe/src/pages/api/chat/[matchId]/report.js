import openDb from '@/lib/db.js';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret'; // Use environment variable in production

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ message: 'Authorization token required' });
  }

  const token = authHeader.split(' ')[1];

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    const userId = decoded.userId;

    const { matchId } = req.query;

    if (!matchId) {
      return res.status(400).json({ message: 'Match ID is required' });
    }

    const db = await openDb();

    const match = await db.get('SELECT id FROM matches WHERE id = ?', matchId);

    if (!match) {
      return res.status(404).json({ message: 'Match not found' });
    }

    const result = await db.run(
      'UPDATE matches SET is_reported = 1 WHERE id = ?',
      matchId
    );

    if (result.changes > 0) {
      res.status(200).json({ message: 'Match reported successfully.' });
    } else {
      res.status(500).json({ message: 'Failed to report match.' });
    }

  } catch (error) {
    console.error('Report chat API error:', error);
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({ message: 'Invalid token' });
    }
    res.status(500).json({ message: 'Internal server error' });
  }
}
